package frc.robot;

import java.util.Calendar;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;

import edu.wpi.first.wpilibj.Joystick;
// import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
/**
 * This is a demo program showing the use of the RobotDrive class, specifically
 * it contains the code necessary to operate a robot with tank drive.
 */

public class Robot extends TimedRobot {
  
  private Joystick driverJoystick, armJoystick;
  // private JoystickButton CIRCLE, SQUARE, TRIANGLE;
  private TalonSRX leftFrontTalon, rightFrontTalon, leftBackTalon, rightBackTalon, armTalon;
  private DoubleSolenoid elevateSolenoid, wheelsSolenoid, cambioVelocidad;
  private Encoder encoder, encoderLeft, encoderRight;
  private long time1;
  private double Kp, Ki;
  private double E_k = 0;
  private final double maxVelocity = 0.8;

  private double setPoint;
  private boolean PIDEnabled = false;
  
  private Compressor compressor;
  private final int LEFT_JOYSTICK = 1;
  private final int RIGHT_JOYSTICK = 5;
  private boolean elevatorToggle;

  // //butttons
  private final int CIRCLE = 2;
  private final int SQUARE = 3;
  private final int TRIANGLE = 4;
  //back buttons R y L
  private final int L1 = 5;
  private final int R1 = 6;
  //back axis
  private final int L2 = 2;
  private final int R2 = 3;
  //Axis buttons
  private final int LEFT_BUTTON = 9;
  private final int RIGHT_BUTTON = 10;

  @Override
  public void robotInit(){
    leftFrontTalon = new TalonSRX(4);
    leftBackTalon = new TalonSRX(1);
    rightFrontTalon = new TalonSRX(3);
    rightBackTalon = new TalonSRX(2);
    armTalon = new TalonSRX(5);

    driverJoystick = new Joystick(0);
    armJoystick = new Joystick(2);

    compressor = new Compressor(0);
    elevateSolenoid = new DoubleSolenoid(0, 1);
    wheelsSolenoid = new DoubleSolenoid(3, 2);
    cambioVelocidad = new DoubleSolenoid(6, 7);
    
    encoder = new Encoder(0, 1, false, Encoder.EncodingType.k4X);
    encoderRight = new Encoder(8, 9, false, Encoder.EncodingType.k4X); 
    encoderLeft = new Encoder(6, 7, false, Encoder.EncodingType.k4X);

  }

  @Override
  public void teleopInit() {

    compressor.setClosedLoopControl(true);
    compressor.start();
    // compressor.getCompressorCurrentTooHighFault();


    // elevateSolenoid.set(DoubleSolenoid.Value.kOff);
    // wheelsSolenoid.set(DoubleSolenoid.Value.kOff);


    leftFrontTalon.set(ControlMode.PercentOutput, 0);
    leftBackTalon.set(ControlMode.PercentOutput, 0);
    rightFrontTalon.set(ControlMode.PercentOutput, 0);
    rightBackTalon.set(ControlMode.PercentOutput, 0);
    armTalon.set(ControlMode.PercentOutput, 0);

    encoder.setMaxPeriod(0.1);
    encoder.setMinRate(10);
    encoder.setDistancePerPulse((Math.PI*(8.0/12.0))/7.0);
    encoder.setReverseDirection(false);
    encoder.setSamplesToAverage(7);

    encoderRight.setMaxPeriod(0.1);
    encoderRight.setMinRate(10);
    encoderRight.setDistancePerPulse((Math.PI*(8.0/12.0))/7.0);
    encoderRight.setReverseDirection(false);
    encoderRight.setSamplesToAverage(7);

    encoderLeft.setMaxPeriod(0.1);
    encoderLeft.setMinRate(10);
    encoderLeft.setDistancePerPulse((Math.PI*(8.0/12.0))/7.0);
    encoderLeft.setReverseDirection(false);
    encoderLeft.setSamplesToAverage(7);

    encoder.reset();
    time1 = Calendar.getInstance().getTimeInMillis();

    E_k = 0;

    Ki = 0.010;
    Kp = 0.025;
    setPoint = 0.0001;
  }

  //Base code
  @Override
  public void teleopPeriodic() {
    double rightTank =  driverJoystick.getRawAxis(5)* -1;
    double leftTank =  driverJoystick.getRawAxis(1);
    double driverArm = armJoystick.getRawAxis(5) * -1;
    boolean wheelsSolenoides = driverJoystick.getRawButton(1);
    boolean elevateSolenoides = driverJoystick.getRawButton(2);
    boolean transmision = driverJoystick.getRawButton(3);

  
    rightFrontTalon.set(ControlMode.PercentOutput, rightTank);
    rightBackTalon.set(ControlMode.PercentOutput, rightTank);
    leftFrontTalon.set(ControlMode.PercentOutput, leftTank);
    leftBackTalon.set(ControlMode.PercentOutput, leftTank);
    armTalon.set(ControlMode.PercentOutput, driverArm);

    //solenoides control
    if(wheelsSolenoides == true){
        wheelsSolenoid.set(DoubleSolenoid.Value.kReverse);
        //elevateSolenoid.set(DoubleSolenoid.Value.kForward);
      }
    else{
        //elevateSolenoid.set(DoubleSolenoid.Value.kReverse);
         wheelsSolenoid.set(DoubleSolenoid.Value.kForward);
      } 

    if(elevateSolenoides == true){
      elevateSolenoid.set(DoubleSolenoid.Value.kReverse);
    }
    else{
      elevateSolenoid.set(DoubleSolenoid.Value.kForward);
    }

    if(driverJoystick.getRawButton(3)){
      cambioVelocidad.set(DoubleSolenoid.Value.kForward);
    }

    if(driverJoystick.getRawButton(4)){
      cambioVelocidad.set(DoubleSolenoid.Value.kReverse);
    }



    long time2 = Calendar.getInstance().getTimeInMillis();
    double delta = (time2 - time1)/1000.0;
    time1 = time2;

    int count = encoder.get();
    double raw = encoder.getRaw();
    double distance = encoder.getDistance();
    double rate = encoder.getRate();
    boolean stopped = encoder.getStopped();


    SmartDashboard.putNumber("count ", count);
    SmartDashboard.putNumber("Distance ", distance);
    SmartDashboard.putNumber("Raw value ", raw);
    SmartDashboard.putNumber("Rater ", rate);
    SmartDashboard.putBoolean("Stopped ", stopped);

//transmision encoders
    int countRight = encoderRight.get();
    double rawRight = encoderRight.getRaw();
    double distanceRight = encoderRight.getDistance();
    double rateRight = encoderRight.getRate();
    boolean stoppedRight = encoderRight.getStopped();


    SmartDashboard.putNumber("count ", countRight);
    SmartDashboard.putNumber("Distance ", distanceRight);
    SmartDashboard.putNumber("Raw value ", rawRight);
    SmartDashboard.putNumber("Rater ", rateRight);
    SmartDashboard.putBoolean("Stopped ", stoppedRight);

    int countLeft = encoderLeft.get();
    double rawLeft = encoderLeft.getRaw();
    double distanceLeft = encoderLeft.getDistance();
    double rateLeft = encoderLeft.getRate();
    boolean stoppedLeft = encoderLeft.getStopped();


    SmartDashboard.putNumber("Left count ", countLeft);
    SmartDashboard.putNumber("Left Distance ", distanceLeft);
    SmartDashboard.putNumber("Left Raw value ", rawLeft);
    SmartDashboard.putNumber("Left Rater ", rateLeft);
    SmartDashboard.putBoolean("Left Stopped ", stoppedLeft);

    double upDownArm = armJoystick.getRawAxis(RIGHT_JOYSTICK) * 0.5;
    if(!PIDEnabled) armTalon.set(ControlMode.PercentOutput, upDownArm);

    if (armJoystick.getRawButtonPressed(CIRCLE)){
      encoder.reset();
      E_k = 0; 
    }

    if (armJoystick.getRawButtonPressed(TRIANGLE)){
      PIDEnabled = !PIDEnabled;
    }
    double v = 0;

    if (PIDEnabled){
      // PID
      // Leer el setpoint
      double e_k = setPoint - raw;
      double e_P = e_k;
      double e_I = E_k + e_k*delta;
      
      v = Kp*e_P + Ki*e_I;

      v = Math.min(Math.max(-maxVelocity, v), maxVelocity);
      E_k = e_I;
      armTalon.set(ControlMode.PercentOutput, -v);
    }
    // if (Math.abs(rawL) > 35){
    //   armTalon.set(ControlMode.PercentOutput, 0.0);
    // }
    
    SmartDashboard.putNumber("Motor Output ", v);
    SmartDashboard.putNumber("Motor Manual ", upDownArm);
    SmartDashboard.putNumber("Integrador ", E_k);
    SmartDashboard.putBoolean("PID", PIDEnabled);


  
    }

    // if(driverJoystick.getRawButton(2)){
    //   elevateSolenoid.set(DoubleSolenoid.Value.kForward);
    //   // wheelsSolenoid.set(DoubleSolenoid.Value.kForward);
    // }


    

  }


  //rojo-1 - 5v
  //azul-2 - channel A
  //marron-3 - ground 
  //amarillo-4 - channel B
